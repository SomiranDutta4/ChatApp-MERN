import React, { useEffect, useState, useContext, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import axios from 'axios'
import { AppContext } from '../../Context/ContextProvider'

const IndChat = ({
  pic, setloadAll, _id, chatName, isGroupChat,
  lmContent, lmSender, lmSentAt, setSingleChat,
  unreadMsg, senderId
}) => {
  const [timePassed, setTime] = useState('')
  const [showMenu, setShowMenu] = useState(false)
  const [latestMsgSender, setSender] = useState(lmSender)
  const menuRef = useRef(null)
  const navigate = useNavigate()

  const {
    User, setUser, setClicked, setChats, URL,
    setShowingBot, setMessages, getChats
  } = useContext(AppContext)

  async function clickedOne() {
    if (!User?.token) {
      localStorage.removeItem('UserData')
      setUser('')
      navigate('/Login')
      return
    }
    if (_id === User._id) return

    setloadAll(false)
    setSingleChat(true)
    setShowingBot(false)
    setClicked('')

    try {
      const response = await fetch(`${URL}/chat/get/one/?_id=${_id}&chatName=${chatName}&token=${User.token}`, { method: 'GET' })

      if (response.status === 401) {
        setUser('')
        setChats([])
        navigate('/Login')
        return
      }

      const data = await response.json()
      let number = User.contactNumber
      const users = data.users
        .filter(u => !isGroupChat && u.contactNumber !== User.contactNumber)
        .map(u => u.name)

      if (isGroupChat) number = users
      else if (users.length) number = users[0]

      const newChat = {
        pic,
        number,
        isGroupChat: data.isGroupChat,
        chatName: data.chatName,
        _id: data._id,
        users: data.users,
        groupAdmins: data.groupAdmins,
        createdBy: data.createdBy,
        latestMessageSeen: false
      }

      setMessages(data.messages)
      setClicked(newChat)
      setSingleChat(true)
    } catch (err) {
      console.error('Error loading chat:', err)
    }
  }

  const deleteChat = async (e) => {
    e.stopPropagation()
    setShowMenu(false)

    if (!User?.token) {
      setUser('')
      navigate('/Login')
      return
    }

    try {
      const response = await axios.delete(`${URL}/chat/delete/?token=${User.token}`, {
        data: { chatId: _id }
      })

      if (response.status === 200) {
        setChats(prevChats => prevChats.filter(chat => chat._id !== _id))
        // getChats()
      } else {
        alert('Failed to delete chat')
      }
    } catch (err) {
      console.error('Error deleting chat:', err)
      alert('Could not delete chat')
    }
  }

  useEffect(() => {
    const createdAt = new Date(lmSentAt).getTime()
    const now = Date.now()
    const diff = now - createdAt
    const mins = Math.floor(diff / (1000 * 60))
    const hrs = Math.floor(diff / (1000 * 60 * 60))
    const days = Math.floor(diff / (1000 * 60 * 60 * 24))

    if (!lmSentAt) setTime('')
    else if (hrs <= 1) setTime(mins === 0 ? 'Now' : `${mins} minutes ago`)
    else if (hrs < 24) setTime(`${hrs} hours ago`)
    else setTime(`${days} days ago`)
  }, [lmSentAt])

  useEffect(() => {
    if (User && senderId === User._id) setSender('you')
  }, [])

  useEffect(() => {
    function handleClickOutside(e) {
      if (menuRef.current && !menuRef.current.contains(e.target)) {
        setShowMenu(false)
      }
    }
    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [])

  return (
    <div
      onClick={clickedOne}
      id={_id}
      className='AllChatsContainer indChatWrapper relative group'
    >
      <div className='pfpDiv'>
        <div className='pfp'>
          <img className='dp' src={pic} alt="chat pfp" />
        </div>
      </div>

      <div className='indvidualChats'>
        <div className='chatNameDiv'>
          <p className='chatName'>{chatName}</p>
        </div>
        <div className='latestmsgDiv'>
          <div className='chatElelmInd'>
            {lmSender && <span className='sender LMdetails'>{latestMsgSender}:</span>}
            {lmContent && <span className='latestMessage LMdetails'>{lmContent}</span>}
            {!lmSender && !lmContent && (
              <span className='LMdetails StartMsg'>Start sending Messages</span>
            )}
          </div>
          <div className='chatElelmInd'>
            <span className='sentAt LMdetails'>{timePassed}</span>
            {unreadMsg === true && <div className='unreadMsg-chat'></div>}
          </div>
        </div>
      </div>

      <div
        className="absolute top-3 right-3 hidden group-hover:flex z-10"
        onClick={(e) => e.stopPropagation()}
      >
        <button
          onClick={() => setShowMenu(!showMenu)}
          className="text-white text-lg px-2 py-1 rounded-full hover:bg-gray-700 transition"
        >
          â‹®
        </button>

        {showMenu && (
          <div
            ref={menuRef}
            className="absolute top-8 right-0 w-36 bg-gray-800 border border-gray-600 rounded-md shadow-lg z-20"
          >
            <button
              onClick={deleteChat}
              className="w-full text-left px-4 py-2 text-sm text-white hover:bg-red-600 hover:text-white transition"
            >
              Delete Chat
            </button>
          </div>
        )}
      </div>
    </div>
  )
}

export default IndChat
